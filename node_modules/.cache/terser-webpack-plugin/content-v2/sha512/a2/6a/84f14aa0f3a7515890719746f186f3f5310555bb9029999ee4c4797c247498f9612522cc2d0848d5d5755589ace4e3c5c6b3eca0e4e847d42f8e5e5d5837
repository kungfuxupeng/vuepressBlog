{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{107:function(a,t,e){a.exports=e.p+\"assets/img/kernel.4a0d1ecf.png\"},206:function(a,t,e){\"use strict\";e.r(t);var n=e(0),s=Object(n.a)({},(function(){var a=this,t=a.$createElement,n=a._self._c||t;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[n(\"h1\",{attrs:{id:\"小技巧\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#小技巧\"}},[a._v(\"#\")]),a._v(\" 小技巧\")]),a._v(\" \"),n(\"h2\",{attrs:{id:\"安装conda后取消命令行前出现的base，取消每次启动自动激活conda的基础环境-使用ubuntu-自带的python环境\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#安装conda后取消命令行前出现的base，取消每次启动自动激活conda的基础环境-使用ubuntu-自带的python环境\"}},[a._v(\"#\")]),a._v(\" 安装conda后取消命令行前出现的base，取消每次启动自动激活conda的基础环境, 使用ubuntu 自带的Python环境\")]),a._v(\" \"),n(\"p\",[a._v(\"方法一：\")]),a._v(\" \"),n(\"p\",[a._v(\"退出base环境回到系统自带的环境\")]),a._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[a._v(\"conda deactivate \\n\")])])]),n(\"p\",[a._v(\"方法二\")]),a._v(\" \"),n(\"p\",[a._v(\"1，通过将auto_activate_base参数设置为false实现：\")]),a._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[a._v(\"conda config --set auto_activate_base false\\n\")])])]),n(\"p\",[a._v(\"2，那要进入的话通过conda activate base\")]),a._v(\" \"),n(\"p\",[a._v(\"3，如果反悔了还是希望base一直留着的话通过\")]),a._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[a._v(\"conda config --set auto_activate_base true\\n\")])])]),n(\"p\",[a._v(\"来恢复\")]),a._v(\" \"),n(\"h2\",{attrs:{id:\"conda创建环境和kernel\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#conda创建环境和kernel\"}},[a._v(\"#\")]),a._v(\" conda创建环境和kernel\")]),a._v(\" \"),n(\"h3\",{attrs:{id:\"创建环境\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#创建环境\"}},[a._v(\"#\")]),a._v(\" 创建环境\")]),a._v(\" \"),n(\"ul\",[n(\"li\",[a._v(\"创建环境不带kernel\\n\"),n(\"code\",[a._v(\"conda create -n [env_name]\")])]),a._v(\" \"),n(\"li\",[a._v(\"如果经常需要用jupyter notebook，那么最好在创建虚拟环境的时候便安装好ipykernel\"),n(\"br\"),a._v(\" \"),n(\"code\",[a._v(\"conda create -n [env_name] python=[version] ipykernel\")])])]),a._v(\" \"),n(\"h3\",{attrs:{id:\"后期给环境配置kernel\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#后期给环境配置kernel\"}},[a._v(\"#\")]),a._v(\" 后期给环境配置kernel\")]),a._v(\" \"),n(\"ol\",[n(\"li\",[a._v(\"如果没有安装，先安装kernel\"),n(\"br\"),a._v(\" \"),n(\"code\",[a._v(\"ipykernel：conda install ipykernel\")]),n(\"br\"),a._v(\"\\n在虚拟环境下创建kernel文件：\"),n(\"code\",[a._v(\"conda install -n [env_name] ipykernel\")]),a._v(\"（是否有用暂时不详）\")]),a._v(\" \"),n(\"li\",[a._v(\"激活环境\"),n(\"br\"),a._v(\" \"),n(\"code\",[a._v(\"source activate [env_name]\")]),a._v(\"或者\"),n(\"code\",[a._v(\"conda activate [env_name]\")])]),a._v(\" \"),n(\"li\",[a._v(\"写入\"),n(\"br\"),a._v(\" \"),n(\"code\",[a._v(\"python -m ipykernel install --name [kernel_name]\")]),a._v(\"（亲测）\"),n(\"br\"),a._v(\"\\n或者\"),n(\"code\",[a._v(\"python -m ipykernel install --user --name [env_name] --display-name [kernel_name]\")]),a._v(\"（未测试，不知与上条命令的区别）\"),n(\"br\"),a._v(\"\\n这样在目录'/usr/local/share/jupyter/kernels/[env_name]/'下会生成一个kernel.json文件，内容如下：\")])]),a._v(\" \"),n(\"div\",{staticClass:\"language-json extra-class\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-json\"}},[n(\"code\",[n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"{\")]),a._v(\"\\n \"),n(\"span\",{pre:!0,attrs:{class:\"token property\"}},[a._v('\"argv\"')]),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\":\")]),a._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"[\")]),a._v(\"\\n  \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"/home/xupeng/anaconda3/envs/tensorflow/bin/python\"')]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n  \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"-m\"')]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n  \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"ipykernel_launcher\"')]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n  \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"-f\"')]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n  \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"{connection_file}\"')]),a._v(\"\\n \"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"]\")]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n \"),n(\"span\",{pre:!0,attrs:{class:\"token property\"}},[a._v('\"display_name\"')]),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\":\")]),a._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"tensorflow\"')]),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\",\")]),a._v(\"\\n \"),n(\"span\",{pre:!0,attrs:{class:\"token property\"}},[a._v('\"language\"')]),n(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[a._v(\":\")]),a._v(\" \"),n(\"span\",{pre:!0,attrs:{class:\"token string\"}},[a._v('\"python\"')]),a._v(\"\\n\"),n(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[a._v(\"}\")]),a._v(\"\\n\")])])]),n(\"p\",[a._v(\"在jupyter notebook 新建文件的时候可以看到该kernel\")]),a._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:e(107),alt:\"An image\"}})]),a._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:e(107),alt:\"solar\"}})])])}),[],!1,null,null,null);t.default=s.exports}}]);","extractedComments":[]}