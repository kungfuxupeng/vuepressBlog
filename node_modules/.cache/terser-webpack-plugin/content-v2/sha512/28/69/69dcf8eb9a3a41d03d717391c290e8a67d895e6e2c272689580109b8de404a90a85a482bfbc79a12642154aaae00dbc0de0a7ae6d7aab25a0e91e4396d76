{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{217:function(t,s,e){\"use strict\";e.r(s);var n=e(0),E=Object(n.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"sql常用命令总结\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#sql常用命令总结\"}},[t._v(\"#\")]),t._v(\" sql常用命令总结\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"连接\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#连接\"}},[t._v(\"#\")]),t._v(\" 连接\")]),t._v(\" \"),e(\"p\",[t._v(\"打开命令提示符，输入命令mysql -u root -p  或者 mysql -u xupeng -p\"),e(\"br\"),t._v(\"\\n连接到远程数据库服务器：mysql -h 10.0.1.99 -u root -p\"),e(\"br\"),t._v(\"\\n输入exit断开与MySQL Server的连接并返回到命令提示符。\")]),t._v(\" \"),e(\"h2\",{attrs:{id:\"管理数据库：\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#管理数据库：\"}},[t._v(\"#\")]),t._v(\" 管理数据库：\")]),t._v(\" \"),e(\"h3\",{attrs:{id:\"数据库操作\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#数据库操作\"}},[t._v(\"#\")]),t._v(\" 数据库操作\")]),t._v(\" \"),e(\"pre\",[e(\"code\",[t._v(\" SHOW DATABASES;列出所有数据库\\n CREATE DATABASE test;创建一个数据库\\n DROP DATABASE test;删除一个数据库\\n USE test;切换到某数据库\\n SHOW TABLES;显示所有的表\\n DESC students;查看表的结构\\n SHOW CREATE TABLE students;查看创建表的语句\\n CREATE TABLE 表名 (\\n 属性名 数据类型 [完整约束条件],\\n 属性名 数据类型 [完整约束条件],\\n  ...\\n  ...\\n 属性名 数据类型 [完整约束条件]\\n );\\n 1.UNSIGNED(表示没有负数从零开始，应用于mysql的数值类型)\\n 2.ZEROFILL（当数值类型的数据长度不够时，会自动把0填充到数字前至数据的约定长度，自动添加UNSIGNED）\\n 3.NOT NULL(非空约束，插入不能给空值)\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t   4.DEFAULT(列的默认约束)\\n 5.PRIMARY KEY(主键,标识数据唯一性,不能重复自动禁止为空)\\n 6.UNIQUE KEY(唯一索引，一个表中可以有多个,同样的值不能重复，但是null除外)\\n 7.AUTO_INCREMENT(用于数值类型自动增长,默认从1开始)\\n 8.FOREIGN KEY(外键约束)\\n\")])]),t._v(\" \"),e(\"h3\",{attrs:{id:\"表操作\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#表操作\"}},[t._v(\"#\")]),t._v(\" 表操作\")]),t._v(\" \"),e(\"pre\",[e(\"code\",[t._v(\" DROP TABLE students;删除表\\n ALTER TABLE students ADD COLUMN birth VARCHAR(10) NOT NULL; 新增一列\\n ALTER TABLE students CHANGE COLUMN birth birthday VARCHAR(20) NOT NULL;修改列\\n ALTER TABLE students DROP COLUMN birthday;删除列\\n REPLACE INTO students (id, class_id, name, gender, score) VALUES (1, 1, '小明', 'F', 99);插入或替换\\n INSERT INTO students (id, class_id, name, gender, score) VALUES (1, 1, '小明', 'F', 99) ON DUPLICATE KEY UPDATE name='小明', gender='F', score=99;插入或更新\\n INSERT IGNORE INTO students (id, class_id, name, gender, score) VALUES (1, 1, '小明', 'F', 99);插入或忽略\\n CREATE TABLE students_of_class1 SELECT * FROM students WHERE class_id=1;快照\\n ALTER TABLE students ADD UNIQUE INDEX uni_name (name);唯一索引，name不能重复\\n ALTER TABLE students ADD CONSTRAINT uni_name UNIQUE (name);唯一约束，name列没有索引，但仍然具有唯一性保证。\\n\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"增（insert）：\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#增（insert）：\"}},[t._v(\"#\")]),t._v(\" 增（INSERT）：\")]),t._v(\" \"),e(\"pre\",[e(\"code\",[t._v(\"INSERT INTO <表名> (字段1, 字段2, ...) VALUES (值1, 值2, ...);\\n如：INSERT INTO students (class_id, name, gender, score) VALUES (2, '大牛', 'M', 80);添加一条\\n    INSERT INTO students (class_id, name, gender, score) VALUES  (1, '大宝', 'M', 87),(2, '二宝', 'M', 81);添加多条\\n\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"删（delete）：\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#删（delete）：\"}},[t._v(\"#\")]),t._v(\" 删（DELETE）：\")]),t._v(\" \"),e(\"pre\",[e(\"code\",[t._v(\"DELETE FROM <表名> WHERE...;\\n如：DELETE FROM students WHERE id=1;\\n    DELETE FROM students;删除整个表的数据\\n\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"改（update）：\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#改（update）：\"}},[t._v(\"#\")]),t._v(\" 改（UPDATE）：\")]),t._v(\" \"),e(\"pre\",[e(\"code\",[t._v(\"UPDATA <表名> 字段名1=字段值1,字段名2=字段值2 ...WHERE...\\n如：UPDATE students SET score=score+10 WHERE score<80;\\n\")])]),t._v(\" \"),e(\"h2\",{attrs:{id:\"查（select）：\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#查（select）：\"}},[t._v(\"#\")]),t._v(\" 查（SELECT）：\")]),t._v(\" \"),e(\"pre\",[e(\"code\",[t._v(\"基本查询：SELECT * FROM <表名>    排序 ORDER BY score;ORDER BY score DESC;ORDER BY score DESC, gender;\\n条件查询：SELECT * FROM <表名> WHERE <条件表达式>     条件运算按照NOT、AND、OR的优先级进行    使用LIKE判断相似\\n投影查询：SELECT 列1, 列2, 列3 FROM <表名> WHERE <条件表达式>\\n          SELECT 列1 别名1, 列2 别名2, 列3 别名3 FROM <表名> WHERE <条件表达式>\\n分页查询：... LIMIT 3 OFFSET 5;从第5个开始显示，显示3条数据    LIMIT 15 OFFSET 30还可以简写成LIMIT 30, 15\\n聚合查询：SELECT COUNT(*) FROM students;查询一共有多少条记录\\n\\t  SELECT class_id, COUNT(*) num FROM students GROUP BY class_id; 分组统计\\n          SELECT class_id, gender, COUNT(*) num FROM students GROUP BY class_id, gender;多组统计\\n          SUM\\t计算某一列的合计值，该列必须为数值类型\\n          AVG\\t计算某一列的平均值，该列必须为数值类型\\n          MAX\\t计算某一列的最大值\\n          MIN\\t计算某一列的最小值\\n多表查询：SELECT * FROM students, classes;笛卡尔乘积  个数为表1的个数乘以表2的个数\\n连接查询：SELECT ... FROM <表1> INNER|RIGHT OUTER|LEFT OUTER|FULL OUTER JOIN <表2> ON 表1.字段1=表2.字段1 WHERE... ORDER BY...\\n\")])])])}),[],!1,null,null,null);s.default=E.exports}}]);","extractedComments":[]}